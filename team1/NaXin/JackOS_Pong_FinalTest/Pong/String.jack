// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array str;
	field int length;
	field int capacity;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if (maxLength = 0){
			let maxLength = 1;
		}
		let str = Array.new(maxLength);
		let capacity = maxLength;
		let length = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(str);
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let str[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let str[length] = c;
		let length = length + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if (length > 0){
			let length = length - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int result, sign, i;
		let sign = 0;
		let result = 0;
		if (str[0] = 45){
			let sign = 1;
			let i = 1;
		}
		else {
			let i = 0;
		}
		
		while(((i < length)&(str[i]>47))&(str[i]<58)){
			let result = (result * 10)+(str[i] - 48);
			let i = i + 1;
		}
		
		if (sign){
			let result = -result;
		}
		
		return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		var int temp;
		var int left, right;
		
		if (val < 0){
			let str[0] = 45;
			let length = 1;
			let val = -val;
			let left = 1;
		}
		else {
			let left = 0;
		}

		while(val > 0){
			let str[length] = (val - ((val / 10) * 10))+ 48;
			let length = length + 1;
			let val = val / 10;
		}
		
		let right = length - 1;
		while(left < right){
			let temp = str[left];
			let str[left] = str[right];
			let str[right] = temp;
			let left = left + 1;
			let right = right - 1;
		}
		return;
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
