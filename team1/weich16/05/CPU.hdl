// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=true,b=instruction[15],out=i);
    And(a=true,b=instruction[12],out=a);
    And(a=true,b=instruction[3],out=d3);
    And(a=true,b=instruction[4],out=d4);
    And(a=true,b=instruction[5],out=d5);
    And(a=true,b=instruction[11],out=zx);
    And(a=true,b=instruction[10],out=nx);
    And(a=true,b=instruction[9],out=zy);
    And(a=true,b=instruction[8],out=ny);
    And(a=true,b=instruction[7],out=f);
    And(a=true,b=instruction[6],out=no);

    Mux16(a=instruction,b=outm,sel=i,out=inA);
    
    Not(in=i,out=noti);
    And(a=i,b=d5,out=id5);
    Or(a=noti,b=id5,out=loadA);
    ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);

    And(a=i,b=d4,out=loadD);
    DRegister(in=outm,load=loadD,out=outD);

    Mux16(a=outA,b=inM,sel=a,out=outAM);

    ALU(x=outD,y=outAM,zx=zx,nx=nx,zy=zy,ny=ny,f=f,no=no,out=outm,zr=zr,ng=ng,out=outM);

    And(a=i,b=d3,out=writeM);
    
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    And(a=notzr,b=notng,out=ps);
    And(a=instruction[0],b=ps,out=j0);
    And(a=instruction[1],b=zr,out=j1);
    And(a=instruction[2],b=ng,out=j2);
    Or(a=j0,b=j1,out=j01);
    Or(a=j01,b=j2,out=j);
    And(a=i,b=j,out=jj);
    PC(in=outA,reset=reset,load=jj,inc=true,out[0..14]=pc);
   
}