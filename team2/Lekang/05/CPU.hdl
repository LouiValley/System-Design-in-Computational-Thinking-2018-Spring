// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
PARTS:
// Put your code here:

//decode
Not(in = instruction[15], out = isA);
Not(in = isA, out = isC);

Mux16(a = outA, b = inM,  sel = instructio[12],out = outAM);
ALU(x = outD, y = outAM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = outM, out = outALU, out = inD, zr = zr, ng = ng);
And(a = isC, b = instruction[3], out = writeM);
//save the result
Or(a = isAcmd, b = instruction[5], out = loadA);
ARegister(in = inA, load = loadA, out = outA, out[0..14] = addressM);
Mux16(a = outALU, b = instruction, out = inA, sel = isAcmd);

And(a = isCcmd, b = instruction[4], out = loadD);
DRegister(in = inD, load = loadD, out = outD);

//PC
Not(in = ng, out = ge); 
Not(in = zr, out = nz);
And(a = ge, b = nz, out = pos); 
//how is the output?
And(a = instruction[0], b = pos, out = jmp0);
And(a = instruction[1], b = zr, out = jmp1);
And(a = instruction[2], b = ng, out = jmp2);
Or(a = jmp0, b = jmp1, out = or12);
Or(a = or12, b = jmp2, out = or123);
And(a = isC, b = or123, out = loadPC);
//reset?
Or(a = reset, b = loadPC, out = ret);
Not(in = ret, out = incPC);
PC(reset = reset, load = loadPC, in = outA, inc = true, out[0..14] = pc);
}