// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //decode instruction
	And16         (a=true, b=instruction, out[0]=j0, out[1]=j1, out[2]=j2, out[3]=d0, out[4]=d1, out[5]=d2,
	                       out[6]=c0, out[7]=c1, out[8]=c2, out[9]=c3, out[10]=c4, out[11]=c5, out[12]=a, out[13]=x0, out[14]=x1, out[15]=i);

	//addressM
	And16         (a=Aout, b=true, out[0..14]=addressM, out[15]=trash1);

	//writeM
	And              (a=i, b=d0, out=loadM);
	And              (a=loadM, b=true, out=writeM); 

	//PC
	PC                 (in=Aout, load=jmp, inc=true, reset=reset, out[0..14]=pc, out[15]=trash2);

	//D register
	And               (a=i, b=d1, out=loadD);
	DRegister     (in=outM1, load=loadD, out=Dout); 

	//AM output
	Mux16        (a=Aout, b=inM, sel=a, out=AMout);

	//ALU
	ALU              (x=Dout, y=AMout, zx=c5, nx=c4, zy=c3, ny=c2, f=c1, no=c0, out=outM1, zr=outzr, ng=outng);

	//jump
	And             (a=i, b=j0, out=jj0);
	And             (a=i, b=j1, out=jj1);
	And             (a=i, b=j2, out=jj2);
	Not              (in=outng, out=outzrpos);
	Not              (in=outzr, out=outnzr);
	And             (a=outnzr, b=outzrpos, out=outpos);
	And             (a=jj0, b=outpos, out=jmp1);
	And             (a=jj1, b=outzr, out=jmp2);
	And             (a=jj2, b=outng, out=jmp3);
    Or                (a=jmp1, b=jmp2, out=jmp4);
	Or                (a=jmp3, b=jmp4, out=jmp);   

	//A register
	Mux16       (a=instruction, b=outM1, sel=i, out=ARegin);
	Mux            (a=true, b=d2, sel=i, out=loadA);
	ARegister  (in=ARegin, load=loadA, out=Aout);

	//outM
	Mux16        (a=false, b=outM1, sel=loadM, out=outM);
}